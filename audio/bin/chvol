#!/bin/luajit

local function first(iterable)
	for line in iterable do
		return line
	end
end

local function firstline(filename)
	local file = io.open(filename)
	if file then
		local line = first(io.lines(filename))
		io.close(file)
		if line then
			return line
		else
			io.stderr:write(string.format("eof: %s is empty", filename))
			os.exit(1)
		end
	else
		io.stderr:write(string.format("file_not_found: %s does not exist", filename))
		os.exit(1)
	end
end


if not arg[1] then
	io.stderr:write('no argument given')
	os.exit(1)
end

if string.sub(arg[1], 1, 1) ~= '+' and string.sub(arg[1], 1, 1) ~= '-' then
	io.stderr:write('argument must start with either + or -')
	os.exit(1)
end

if string.sub(arg[1], -1) ~= '%' then
	io.stderr:write('argument must end with %')
	os.exit(1)
end

if not tonumber(string.sub(arg[1], 1, -2)) then
	io.stderr:write('argument must contain a number')
	os.exit(1)
end

local diff = tonumber(string.sub(arg[1], 1, -2))
print('parsed ' .. diff)

local cache = os.getenv("XDG_CACHE_HOME")
local newest = tonumber(firstline(cache .. '/bin/pulsetest.newest_sink_index'))
print('newest sink ' .. newest)

local currentpath = string.format("%s/bin/pulsetest.sinks.%s.volume", cache, newest)
print('reading from ' .. currentpath)

local current = tonumber(firstline(currentpath))
print('current ' .. current)

local new = current + diff
print('new ' .. new)

if new < 0 then
	io.stderr:write('too low')
	new = 0
end

if new > 100 then
	io.stderr:write('too high')
	new = 100
end

if current == new then
	io.stderr:write('no change')
	os.exit(1)
end

os.execute(string.format('pactl set-sink-volume %d %s', newest, arg[1]))

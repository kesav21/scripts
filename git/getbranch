#!/bin/luajit

local lfs = require('lfs')

local function parents(dir)
	return function()
		dir = dir .. '/..'
		return dir
	end
end

local function takeUntil(predicate, iterator)
	return function()
		local element = iterator()
		if predicate(element) then
			return element
		end
	end
end

local function insert(value, iterator)
	local firstTime = true
	return function()
		if firstTime then
			firstTime = false
			return value
		else
			return iterator()
		end
	end
end

local function append(value, iterator)
	local firstTime = true
	return function()
		local element = iterator()
		if element then
			return element
		elseif firstTime then
			firstTime = false
			return value
		end
	end
end

local function map(transformation, iterator)
	return function()
		local element = iterator()
		if element then
			return transformation(element)
		end
	end
end

local function first(predicate, iterator)
	for i in iterator do
		if predicate(i) then
			return i
		end
	end
end

local function file_exists(filename)
	local file = io.open(filename, 'r')
	if file then
		io.close(file)
		return true
	else
		return false
	end
end

local function readline(filename)
	local file = io.open(filename, 'r')
	if file then
		for line in io.lines(filename) do
			io.close(file)
			return line
		end
	end
end

local function isnotroot(dir)
	return lfs.attributes(dir).ino ~= 2
end

local function to_head_file(path)
	return path .. '/.git/HEAD'
end

local cwd = lfs.currentdir()
local dirs = append('/', insert(cwd, takeUntil(isnotroot, parents(cwd))))
local file = first(file_exists, map(to_head_file, dirs))
if file then
	local line = readline(file)
	local branch = string.sub(line, 17)
	print(branch)
else
	os.exit(1)
end
